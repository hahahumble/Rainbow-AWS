[{"/Users/hahabundle/Documents/Code/WebStormProjects/rainbow-aws/code/src/options.js":"1","/Users/hahabundle/Documents/Code/WebStormProjects/rainbow-aws/code/src/index.js":"2","/Users/hahabundle/Documents/Code/WebStormProjects/rainbow-aws/code/src/background.js":"3","/Users/hahabundle/Documents/Code/WebStormProjects/rainbow-aws/code/src/content.js":"4","/Users/hahabundle/Documents/Code/WebStormProjects/rainbow-aws/code/src/views/Options/App.js":"5","/Users/hahabundle/Documents/Code/WebStormProjects/rainbow-aws/code/src/views/Popup/App.js":"6"},{"size":209,"mtime":1656173271167,"results":"7","hashOfConfig":"8"},{"size":228,"mtime":1656174096918,"results":"9","hashOfConfig":"8"},{"size":35,"mtime":1660586194928,"results":"10","hashOfConfig":"8"},{"size":1076,"mtime":1675750385660,"results":"11","hashOfConfig":"8"},{"size":494,"mtime":1660584697405,"results":"12","hashOfConfig":"8"},{"size":12872,"mtime":1661179806018,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cwiuc1",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"/Users/hahabundle/Documents/Code/WebStormProjects/rainbow-aws/code/src/options.js",[],[],"/Users/hahabundle/Documents/Code/WebStormProjects/rainbow-aws/code/src/index.js",[],[],"/Users/hahabundle/Documents/Code/WebStormProjects/rainbow-aws/code/src/background.js",[],[],"/Users/hahabundle/Documents/Code/WebStormProjects/rainbow-aws/code/src/content.js",[],[],"/Users/hahabundle/Documents/Code/WebStormProjects/rainbow-aws/code/src/views/Options/App.js",[],[],"/Users/hahabundle/Documents/Code/WebStormProjects/rainbow-aws/code/src/views/Popup/App.js",["33"],[],"import React, {useState, Fragment, useEffect, useRef} from 'react'\nimport {TwitterPicker} from 'react-color'\nimport {CogIcon, ExternalLinkIcon} from '@heroicons/react/solid'\nimport './App.css'\n\nfunction App() {\n  let locations = [\n    {\n      name: 'United States',\n      areas: [\n        {country: 'ðŸ‡ºðŸ‡¸', region: 'N. Virginia', code: 'us-east-1'},\n        {country: 'ðŸ‡ºðŸ‡¸', region: 'Ohio', code: 'us-east-2'},\n        {country: 'ðŸ‡ºðŸ‡¸', region: 'N. California', code: 'us-west-1'},\n        {country: 'ðŸ‡ºðŸ‡¸', region: 'Oregon', code: 'us-west-2'},\n      ],\n    },\n    {\n      name: 'Africa',\n      areas: [\n        {country: 'ðŸ‡¿ðŸ‡¦', region: 'Cape Town', code: 'af-south-1'},\n      ],\n    },\n    {\n      name: 'Asia Pacific',\n      areas: [\n        {country: 'ðŸ‡­ðŸ‡°', region: 'Hong Kong', code: 'ap-east-1'},\n        {country: 'ðŸ‡®ðŸ‡©', region: 'Jakarta', code: 'ap-southeast-3'},\n        {country: 'ðŸ‡®ðŸ‡³', region: 'Mumbai', code: 'ap-south-1'},\n        {country: 'ðŸ‡¯ðŸ‡µ', region: 'Osaka', code: 'ap-northeast-3'},\n        {country: 'ðŸ‡°ðŸ‡·', region: 'Seoul', code: 'ap-northeast-2'},\n        {country: 'ðŸ‡¸ðŸ‡¬', region: 'Singapore', code: 'ap-southeast-1'},\n        {country: 'ðŸ‡¦ðŸ‡º', region: 'Sydney', code: 'ap-southeast-2'},\n        {country: 'ðŸ‡¯ðŸ‡µ', region: 'Tokyo', code: 'ap-northeast-1'},\n      ],\n    },\n    {\n      name: 'Canada',\n      areas: [\n        {country: 'ðŸ‡¨ðŸ‡¦', region: 'Central', code: 'ca-central-1'},\n      ],\n    },\n    {\n      name: 'Europe',\n      areas: [\n        {country: 'ðŸ‡©ðŸ‡ª', region: 'Frankfurt', code: 'eu-central-1'},\n        {country: 'ðŸ‡®ðŸ‡ª', region: 'Ireland', code: 'eu-west-1'},\n        {country: 'ðŸ‡¬ðŸ‡§', region: 'London', code: 'eu-west-2'},\n        {country: 'ðŸ‡®ðŸ‡¹', region: 'Milan', code: 'eu-south-1'},\n        {country: 'ðŸ‡«ðŸ‡·', region: 'Paris', code: 'eu-west-3'},\n        {country: 'ðŸ‡¸ðŸ‡ª', region: 'Stockholm', code: 'eu-north-1'},\n      ],\n    },\n    {\n      name: 'Middle East',\n      areas: [\n        {country: 'ðŸ‡§ðŸ‡­', region: 'Bahrain', code: 'me-south-1'},\n      ],\n    },\n    {\n      name: 'South America',\n      areas: [\n        {country: 'ðŸ‡§ðŸ‡·', region: 'SÃ£o Paulo', code: 'sa-east-1'},\n      ],\n    }\n  ]\n\n  let colorPaletteDefault = {\n    \"us-east-1\": '#1a232f',\n    \"us-east-2\": '#1a232f',\n    \"us-west-1\": '#1a232f',\n    \"us-west-2\": '#1a232f',\n    'af-south-1': '#1a232f',\n    'ap-east-1': '#1a232f',\n    'ap-southeast-3': '#1a232f',\n    'ap-south-1': '#1a232f',\n    'ap-northeast-3': '#1a232f',\n    'ap-northeast-2': '#1a232f',\n    'ap-northeast-1': '#1a232f',\n    'ap-southeast-2': '#1a232f',\n    'ap-southeast-1': '#1a232f',\n    'ca-central-1': '#1a232f',\n    'eu-central-1': '#1a232f',\n    'eu-west-1': '#1a232f',\n    'eu-west-2': '#1a232f',\n    'eu-south-1': '#1a232f',\n    'eu-west-3': '#1a232f',\n    'eu-north-1': '#1a232f',\n    'me-south-1': '#1a232f',\n    'sa-east-1': '#1a232f'\n  }\n\n  let colorPicker = {\n    \"us-east-1\": false,\n    \"us-east-2\": false,\n    \"us-west-1\": false,\n    \"us-west-2\": false,\n    'af-south-1': false,\n    'ap-east-1': false,\n    'ap-southeast-3': false,\n    'ap-south-1': false,\n    'ap-northeast-3': false,\n    'ap-northeast-2': false,\n    'ap-northeast-1': false,\n    'ap-southeast-2': false,\n    'ap-southeast-1': false,\n    'ca-central-1': false,\n    'eu-central-1': false,\n    'eu-west-1': false,\n    'eu-west-2': false,\n    'eu-south-1': false,\n    'eu-west-3': false,\n    'eu-north-1': false,\n    'me-south-1': false,\n    'sa-east-1': false\n  }\n\n  const useIsMount = () => {\n    const isMountRef = useRef(true);\n    useEffect(() => {\n      isMountRef.current = false;\n    }, []);\n    return isMountRef.current;\n  };\n\n  const [, setColor] = useState(\"\")\n  const [colorPalette, setColorPalette] = useState(colorPaletteDefault)\n  const [displayColorPicker, setDisplayColorPicker] = useState(colorPicker)\n\n  const isMount = useIsMount();\n\n  useEffect(() => {\n    if (isMount) {\n      // First Render\n      chrome.storage.sync.get(['colorPalette'], function (result) {\n        // console.log('Value currently is ' + JSON.stringify(result[\"colorPalette\"]));\n        if (result[\"colorPalette\"] != null) {  // Exist in storage\n          setColorPalette(result[\"colorPalette\"])  // Update colorPalette state\n        } else {\n          chrome.storage.sync.set({\"colorPalette\": colorPaletteDefault}, function () {\n            console.log(\"Change saved\")\n          });\n        }\n      });\n    } else {\n      // Subsequent Render\n      chrome.storage.sync.set({\"colorPalette\": colorPalette}, function () {\n        console.log(\"Change saved\")\n      });\n    }\n  });\n\n  const updateColor = (code, color) => {\n    setColor(color.hex)\n    setColorPalette(previousState => {\n      return {...previousState, [code]: color.hex}\n    });\n  }\n\n  const handleClick = (code) => {  // open popup window\n    setDisplayColorPicker(previousState => {\n      return {...previousState, [code]: true}\n    });\n  }\n\n  const handleClose = () => {\n    setDisplayColorPicker(false)\n  }\n\n  function classNames(...classes) {\n    return classes.filter(Boolean).join(' ')\n  }\n\n  // Option page\n  // document.addEventListener('DOMContentLoaded', () => {\n  //   let y = document.getElementById(\"option_page\");\n  //   y.addEventListener(\"click\", openOptionPage);\n  // });\n\n  // About page\n  // document.addEventListener('DOMContentLoaded', () => {\n  //   let y = document.getElementById(\"index_link\");\n  //   y.addEventListener(\"click\", openIndex);\n  // });\n\n  // function openOptionPage() {\n  //   chrome.tabs.create({ url: \"chrome://extensions/?options=\" + chrome.runtime.id })\n  // }\n\n  function openAboutPage() {\n    chrome.tabs.create({\n      active: true,\n      url: \"https://chrome.google.com/webstore/detail/rainbow-aws-aws-console-h/foicngnfgjoobicakmgedfomghgdkljg\"\n    });\n  }\n\n  return (\n    <div className=\"dark:bg-gray-900 transition duration-200 w-96 overflow-hidden\">\n      <header className=\"\">\n        <div className=\"pl-5 pt-4 flex flex-row\">\n          <img src=\"/icon128.png\" style={{width: \"32px\", height: \"32px\"}} alt=\"icon\"/>\n          <p className=\"text-lg pl-4 pt-1 text-gray-700 font-semibold font-title dark:text-white\">Rainbow AWS</p>\n          {/*<div className=\"flex flex-row ml-auto mt-1.5\">*/}\n          {/*  <CogIcon*/}\n          {/*    id={\"option_page\"}*/}\n          {/*    className=\"mr-5 ml-3 w-6 h-6 fill-gray-700 hover:ring-2 hover:ring-gray-700 hover:ring-offset-2 rounded-full dark:fill-white\"/>*/}\n          {/*</div>*/}\n        </div>\n\n        <div className=\"mx-3\">\n          <div className=\"px-4\">\n            <div className=\"pt-4 flex flex-col\">\n              <div className=\"-my-2 -mx-4 overflow-x-auto\">\n                <div className=\"inline-block min-w-full py-2 align-middle md:px-6 lg:px-8\">\n                  <div className=\"overflow-hidden shadow ring-1 ring-black ring-opacity-5 rounded-lg\">\n                    <table className=\"min-w-full\">\n                      <thead className=\"bg-white dark:bg-gray-700\">\n                      <tr>\n                        <th scope=\"col\"\n                            className=\"py-1.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6 dark:text-white\">\n                          Country\n                        </th>\n                        <th scope=\"col\"\n                            className=\"pl-1 pr-1 py-1.5 text-left text-sm font-semibold text-gray-900 dark:text-white\">\n                          Region\n                        </th>\n                        <th scope=\"col\"\n                            className=\"pl-1 pr-3 py-1.5 text-left text-sm font-semibold text-gray-900 dark:text-white\">\n                          Code\n                        </th>\n                        <th scope=\"col\"\n                            className=\"pl-1 pr-3 py-1.5 text-left text-sm font-semibold text-gray-900 dark:text-white\">\n                          Color\n                        </th>\n                      </tr>\n                      </thead>\n                      <tbody className=\"bg-white dark:bg-gray-900\">\n\n                      {/*location name*/}\n                      {locations.map((location) => (\n                        <Fragment key={location.name}>\n                          <tr className=\"border-t border-gray-200 dark:border-gray-700\">\n                            <th\n                              colSpan={5}\n                              scope=\"colgroup\"\n                              className=\"dark:bg-gray-800 dark:text-white bg-gray-50 px-4 py-1.5 text-left text-sm font-semibold text-gray-900 sm:px-6 text-center\"\n                            >\n                              {location.name}\n                            </th>\n                          </tr>\n\n                          {/*sub location*/}\n                          {location.areas.map((area) => (\n                            <tr\n                              className={classNames('border-gray-300 border-t dark:border-gray-700')}\n                            >\n                              <td\n                                className=\"whitespace-nowrap py-1.5 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6 dark:text-white\">\n                                {area.country}\n                              </td>\n                              <td className=\"whitespace-nowrap pl-1 pr-3 py-1.5 text-sm text-gray-500 dark:text-white\">\n                                {area.region}\n                              </td>\n                              <td className=\"whitespace-nowrap pl-1 pr-3 py-1.5 text-sm text-gray-500 dark:text-white\">\n                                {area.code}\n                              </td>\n                              <td className=\"whitespace-nowrap pl-1 pr-3 py-1.5 text-sm text-gray-500 dark:text-white\">\n\n                                <button\n                                  type=\"button\"\n                                  className=\"rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 dark:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-gray-400 dark:focus:ring-gray-200 focus:ring-offset-2 text-center align-middle\"\n                                  style={{backgroundColor: colorPalette[area.code]}}\n                                  onClick={() => {\n                                    handleClick(area.code)\n                                  }}\n                                >\n                                </button>\n\n                                {displayColorPicker[area.code] && area.code !== \"sa-east-1\" ?\n                                  <div className=\"absolute z-[2] right-4 mt-4 mr-2\">\n                                    <div className=\"fixed top-0 right-0 left-0 bottom-0\" onClick={handleClose}/>\n                                    <TwitterPicker color={colorPalette[area.code]}\n                                                   colors={['#1a232f', '#7B1FA2', '#2E7D32', '#1565C0', '#B71C1C', '#000000', '#0097A7', '#00897B', '#9E9D24', '#880E4F']}\n                                                   onChangeComplete={(color) => updateColor(area.code, color)}\n                                                   triangle=\"top-right\"/>\n                                  </div>\n                                  : null}\n\n                                {displayColorPicker[area.code] && area.code === \"sa-east-1\" ?\n                                  <div className=\"absolute z-[2] right-4 mr-2 top-[944px]\">\n                                    <div className=\"fixed top-0 right-0 left-0 bottom-0\" onClick={handleClose}/>\n                                    <TwitterPicker color={colorPalette[area.code]}\n                                                   colors={['#1a232f', '#7B1FA2', '#2E7D32', '#1565C0', '#B71C1C', '#000000', '#0097A7', '#00897B', '#9E9D24', '#880E4F']}\n                                                   onChangeComplete={(color) => updateColor(area.code, color)}\n                                                   triangle=\"hide\"/>\n                                  </div>\n                                  : null}\n                              </td>\n                            </tr>\n                          ))}\n                        </Fragment>\n                      ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"mb-2 flex flex-row justify-center mt-2 mr-2 cursor-pointer underline hover:text-blue-700 text-blue-900 mt-4 dark:text-white dark:hover:text-gray-200\"\n            onClick={openAboutPage}>\n            <p>About(Version 0.3)</p>\n            <ExternalLinkIcon className=\"w-4 h-4 fill-blue-900 dark:fill-white ml-1.5 mt-0.5\"/>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App\n",{"ruleId":"34","severity":1,"message":"35","line":3,"column":9,"nodeType":"36","messageId":"37","endLine":3,"endColumn":16},"no-unused-vars","'CogIcon' is defined but never used.","Identifier","unusedVar"]